{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Chapter04_kfold.ipynb의 사본","provenance":[],"collapsed_sections":[],"machine_shape":"hm","authorship_tag":"ABX9TyNhx73iVlVyJefzYLXIq9ZL"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0zX_RuVyh1s-","executionInfo":{"status":"ok","timestamp":1654180038061,"user_tz":-540,"elapsed":23464,"user":{"displayName":"오재동","userId":"09849167419611092646"}},"outputId":"66efbc72-b7dc-4426-9c5e-329807727d6e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["# 구글 드라이브 마운트\n","from google.colab import drive\n","\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["# 필요 라이브러리 Import \n","import pandas as pd \n","import numpy as np \n","from sklearn.model_selection import train_test_split "],"metadata":{"id":"e_AzxPYQh_SR","executionInfo":{"status":"ok","timestamp":1654180039231,"user_tz":-540,"elapsed":1174,"user":{"displayName":"오재동","userId":"09849167419611092646"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["dog_ratings = pd.read_csv('/content/drive/MyDrive/LAMDA/pet_data/recom_dataset/dog_data_kfold.csv')\n","dog_ratings = dog_ratings.drop('regdt', axis=1)"],"metadata":{"id":"-HipukA4iAwF","executionInfo":{"status":"ok","timestamp":1654180040796,"user_tz":-540,"elapsed":1569,"user":{"displayName":"오재동","userId":"09849167419611092646"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["dog_item = pd.read_csv('/content/drive/MyDrive/LAMDA/pet_data/recom_dataset/dog_item.csv')\n","dog_item.set_index('goodsno', inplace=True)"],"metadata":{"id":"YmWy94WFVM1V","executionInfo":{"status":"ok","timestamp":1654180041825,"user_tz":-540,"elapsed":6,"user":{"displayName":"오재동","userId":"09849167419611092646"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["X = dog_ratings.copy()\n","\n","X.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HAFgVjRAVo0F","executionInfo":{"status":"ok","timestamp":1654180043278,"user_tz":-540,"elapsed":6,"user":{"displayName":"오재동","userId":"09849167419611092646"}},"outputId":"e1e4a2db-0f65-417a-bb1e-dd4ae656d6c5"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['m_no', 'goodsno', 'point', 'pet_age', 'dogname'], dtype='object')"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["class NEW_MF():\n","  def __init__(self, ratings, K, alpha, beta, iterations, verbose=True):\n","    self.R = np.array(ratings)   # DataFrame으로 전달된 평점(ratings)을 numpy array로 바꾸어서 저장 \n","    item_id_index = []   # 아이디를 인덱스로 매핑해주는 맵 \n","    index_item_id = []   # 인덱스를 아이디로 매핑해주는 맵 \n","    for i, one_id in enumerate(ratings):   # 각 아이템에 대해 \n","      item_id_index.append([one_id, i])   # 현재 아이템의 아이디와 인덱스 저장  \n","      index_item_id.append([i, one_id])   # 현재 아이템의 인덱스와 아이디 저장 \n","    self.item_id_index = dict(item_id_index)\n","    self.index_item_id = dict(index_item_id)\n","    user_id_index = []\n","    index_user_id = [] \n","    for i, one_id in enumerate(ratings.T):   # 같은 작업을 사용자 아이디에 대해 실행 \n","      user_id_index.append([one_id, i])\n","      index_user_id.append([i, one_id])\n","    self.user_id_index = dict(user_id_index)\n","    self.index_user_idx = dict(index_user_id)\n","\n","    self.num_users, self.num_items = np.shape(self.R)   # 사용자 수와 아이템 수를 받아옴 \n","    self.K = K   # K: 잠재요인(latent factor)의 수 \n","    self.alpha = alpha  # alpha: 학습률 \n","    self.beta = beta   # beta: 정규화 계수 \n","    self.iterations = iterations   # SGD의 계산을 할 때의 반복 횟수 \n","    self.verbose = verbose   # SGD의 중간 학습 과정을 출력할 것인가 \n","  \n","  def rmse(self):\n","    '''\n","    현재의 P, Q 행렬을 이용해 Root Mean Squared Error (RMSE) 계산 \n","    '''\n","    xs, ys = self.R.nonzero()   # R에서 평점이 있는 요소(0이 아닌)의 인덱스를 가져옴, [행 인덱스], [열 인덱스] 반환 \n","    self.predictions = []\n","    self.errors = []\n","    for x, y in zip(xs, ys):   # 평점이 있는 요소 각각에 대해 \n","      prediction = self.get_prediction(x, y)   # 사용자 x, 아이템 y에 대해 평점 예측치 계산 \n","      self.predictions.append(prediction)   # 예측값을 예측값 리스트에 추가 \n","      self.errors.append(self.R[x, y] - prediction)   # 실제값(R)과 예측값의 차이(errors)를 계산하여 오차값 리스트에 추가 \n","    \n","    # 예측값과 에러들을 numpy array로 변홚 \n","    self.predictions = np.array(self.predictions)   \n","    self.errors = np.array(self.errors)\n","    return np.sqrt(np.mean(self.errors**2))\n","  \n","  def val_rmse(self):\n","    '''\n","    현재의 P, Q 행렬을 이용해 Root Mean Squared Error (RMSE) 계산 \n","    '''\n","    # xs, ys = self.R.nonzero()   # R에서 평점이 있는 요소(0이 아닌)의 인덱스를 가져옴, [행 인덱스], [열 인덱스] 반환 \n","    val_samples = self.val_samples\n","    self.predictions = []\n","    self.errors = []\n","    for x, y, z in val_samples:   # 평점이 있는 요소 각각에 대해 \n","      prediction = self.get_prediction(x, y)   # 사용자 x, 아이템 y에 대해 평점 예측치 계산 \n","      self.predictions.append(prediction)   # 예측값을 예측값 리스트에 추가 \n","      self.errors.append(self.R[x, y] - prediction)   # 실제값(R)과 예측값의 차이(errors)를 계산하여 오차값 리스트에 추가 \n","    \n","    # 예측값과 에러들을 numpy array로 변홚 \n","    self.predictions = np.array(self.predictions)   \n","    self.errors = np.array(self.errors)\n","    return np.sqrt(np.mean(self.errors**2))\n","\n","  def fit(self):\n","    '''\n","    정해진 반복 횟수만큼 식(2)와 식(4)를 이용하여 P, Q, bu, bd 값 업데이트 \n","    '''\n","    # user-feature, movie-feature matrix 초기화\n","    self.P = np.random.normal(scale=1./self.K, size=(self.num_users, self.K)) \n","    self.Q = np.random.normal(scale=1./self.K, size=(self.num_items, self.K))\n","\n","    # bias 초기화\n","    self.b_u = np.zeros(self.num_users)   # 사용자 평가 경향 bu를 0으로 초기화\n","    self.b_d = np.zeros(self.num_items)   # 아이템 평가 경향 bd를 0으로 초기화 \n","    self.b = np.mean(self.R[self.R.nonzero()])   # 전체평균 b를 구해서 저장 \n","\n","    # training data sample list\n","    # rows, columns = self.R.nonzero()   # 평점행렬 R 중에서 평점이 있는 요소의 인덱스를 가져옴 \n","    # SGD를 적용할 대상 (평점이 있는 요소의 인덱스와 평점)을 리스트로 만들어 sample에 저장 \n","    # self.samples = [(i, j, self.R[i, j]) for i, j in zip(rows, columns)]   \n","\n","    # 주어진 iterations 수만큼 SGD 적용 \n","    training_process = []\n","    for i in range(self.iterations):   # 지정된 반복 횟수만큼 \n","      np.random.shuffle(self.train_samples)   # samples를 임의로 섞음 \n","      self.sgd()   # SGD() 함수 호출 \n","      rmse = self.rmse()   # rmse() 함수 호출 \n","      training_process.append((i+1, rmse))   # 결과 저장 \n","      if self.verbose:  # verbose == True이면 \n","        if (i+1) % 10 == 0:   # 10회 반복마다 결과 표시\n","          print(f'Iteration: {i+1}; Train RMSE = {rmse}')\n","    return training_process\n","\n","  def convert_mno(self, data):\n","    return self.user_id_index[data]\n","\n","  def convert_gno(self, data):\n","    return self.item_id_index[data]\n","\n","  def set_train_val(self, ratings_train):\n","    data_df = ratings_train.copy()\n","    x = data_df \n","    y = data_df['m_no']\n","    x_train, x_val, y_train, y_val = train_test_split(x, y, test_size=0.2, stratify=y)\n","    x_train['m_no'] = x_train['m_no'].apply(self.convert_mno)\n","    x_train['goodsno'] = x_train['goodsno'].apply(self.convert_gno)\n","    x_val['m_no'] = x_val['m_no'].apply(self.convert_mno)\n","    x_val['goodsno'] = x_val['goodsno'].apply(self.convert_gno)\n","    train_samples = [(m_no, goodsno, point) for m_no, goodsno, point in zip(x_train.m_no, x_train.goodsno, x_train.point)]\n","    val_samples = [(m_no, goodsno, point) for m_no, goodsno, point in zip(x_val.m_no, x_val.goodsno, x_val.point)]\n","\n","    self.train_samples = train_samples \n","    self.val_samples = val_samples  \n","\n","  def set_test(self, ratings_test):\n","    '''\n","    분리된 test set을 넘겨받아 클래스 내부의 test set 생성  \n","    '''\n","    test_set = []  # test set에 해당하는 사용자-아이템 평점 저장 배열 \n","    for i in range(len(ratings_test)):   \n","      x = self.user_id_index[ratings_test.iloc[i, 0]]   # 현재 사용자의 인덱스를 받아옴 \n","      y = self.item_id_index[ratings_test.iloc[i, 1]]   # 현재 아이템의 인덱스를 받아옴 \n","      z = ratings_test.iloc[i, 2]   # 현재 사용자-아이템 평점을 받아옴 \n","      test_set.append([x, y, z])   # test_set에 받아온 값들 추가\n","      # 해당 사용자-아이템-평점을 R에서 0으로 지움 (R을 사용해서 모델을 학습하는데, test set은 제외해야 하기 때문)\n","      self.R[x, y] = 0    \n","      self.test_set = test_set  \n","    return test_set\n","\n","  def test_rmse(self):\n","    '''\n","    Test set의 RMSE 값 계산 \n","    '''\n","    error = 0   # error를 0으로 초기화 \n","    for one_set in self.test_set:   # test set에 있는 각각의 사용자-아이템 평점에 대해 \n","      predicted = self.get_prediction(one_set[0], one_set[1])   # 예측 평점을 계산 \n","      error += pow(one_set[2] - predicted, 2)   # 사용자-아이템 평점의 평점 실제값와 예측치의 차이를 구함 \n","    return np.sqrt(error/len(self.test_set))   # RMSE 값 반환 \n","\n","  def test(self):\n","    '''\n","    MF 모델을 SGD 방식으로 훈련하는 함수 \n","    '''\n","    # P, Q, b_u, b_d, b를 초기화 \n","    self.P = np.random.normal(scale=1./self.K, size=(self.num_users, self.K))\n","    self.Q = np.random.normal(scale=1./self.K, size=(self.num_items, self.K))\n","    self.b_u = np.zeros(self.num_users)\n","    self.b_d = np.zeros(self.num_items)\n","    self.b = np.mean(self.R[self.R.nonzero()])\n","\n","    # R에서 평점이 있는 (0이 아닌) 요소의 인덱스를 가져옴 -> R 전체가 train_set이 됨 \n","    # rows, columns = self.R.nonzero()\n","    # train set(R)에 대해서 사용자-아이템 평점 데이터를 구성함 \n","    # self.samples = [(i, j, self.R[i, j]) for i, j in zip(rows, columns)]\n","    training_process = []              \n","\n","    for i in range(self.iterations):  # iterations 수만큼 \n","      np.random.shuffle(self.train_samples)   # 데이터를 섞음 \n","      self.sgd()   # SGD 방법으로 P, Q, bu, bd 업데이트 \n","      rmse1 = self.rmse()   # train set의 RMSE 값을 계산 \n","      rmse2 = self.val_rmse()\n","      rmse3 = self.test_rmse()   # test set의 RMSE 값을 계산 \n","      training_process.append((i+1, rmse1, rmse2, rmse3))   # iteration 수, Train RMSE, Test RMSE 값을 결과에 추가 \n","      if self.verbose:   # verbose = True이면 10회 반복마다 중간 결과 표시  \n","        if (i+1) % 10 == 0:\n","          print('Iteration: %d; Training RMSE=%.4f; Val RMSE = %.4f; Test RMSE = %.4f'%(i+1, rmse1, rmse2, rmse3))\n","    return training_process \n","\n","\n","  def get_one_prediction(self, user_id, item_id):\n","    '''\n","    주어진 user_id와 item_id에 대한 예측치를 계산해서 돌려줌 \n","    '''\n","    return self.get_prediction(self.user_id_index[user_id], self.item_id_index[item_id])\n","\n","  def full_prediction(self):\n","    '''\n","    모든 사용자의 모든 아이템에 대한 예측치를 계산해서 돌려줌 \n","    '''\n","    return self.b + self.b_u[:, np.newaxis] + self.b_d[np.newaxis, :] + self.P.dot(self.Q.T)\n","\n","  def get_prediction(self, i, j):\n","    '''\n","    평점 예측값을 구하는 함수 \n","    '''\n","    # 사용자 i, 아이템 j에 대한 평점 예측치를 식 (3)을 이용해 계산 \n","    prediction = self.b + self.b_u[i] + self.b_d[j] + self.P[i, :].dot(self.Q[j, :].T)\n","    if prediction > 5: \n","      prediction = 5 \n","    elif prediction < 1:\n","      prediction = 1 \n","    return prediction \n","\n","  def get_user_id_index(self):\n","    return self.user_id_index\n","\n","  def get_item_id_index(self):\n","    return self.item_id_index\n","\n","  def sgd(self):\n","    '''\n","    SGD를 실행하는 함수 \n","    '''\n","    for i, j, r in self.train_samples:   # samples에 있는 각 (사용자-아이템-평점) 세트에 대해 \n","      prediction = self.get_prediction(i, j)   # 사용자 i, 아이템 j에 대한 평점 예측치를 구함 \n","      e = (r - prediction)   # 실제 평점과 비교해 오차를 구함 \n","\n","      self.b_u[i] += self.alpha * (e - self.beta * self.b_u[i])   # 앞의 식 (4)를 적용해 사용자 평가경향 업데이트\n","      self.b_d[j] += self.alpha * (e - self.beta * self.b_d[j])   # 앞의 식 (4)를 적용해 아이템 평가경향 업데이트 \n","\n","      self.P[i, :] += self.alpha * (e * self.Q[j, :] - self.beta * self.P[i,:])   # 앞의 식 (2)를 적용해 P 행렬 업데이트 \n","      self.Q[j, :] += self.alpha * (e * self.P[i, :] - self.beta * self.Q[j,:])   # 앞의 식 (2)를 적용해 Q 행렬 업데이트 "],"metadata":{"id":"mnBxWTfcSFAb","executionInfo":{"status":"ok","timestamp":1654180045199,"user_tz":-540,"elapsed":507,"user":{"displayName":"오재동","userId":"09849167419611092646"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import StratifiedKFold \n","\n","def split_df(df, kfold_n=5):\n","    '''\n","    df col: img_path, label\n","    '''\n","    kfold = StratifiedKFold(n_splits=kfold_n)\n","    \n","    # 클래스 비율 고려하여 Fold 별로 데이터 분리 \n","    X = np.array(df) \n","    y = df.m_no.values \n","    \n","    datas = [] \n","    for i, (train_idx, val_idx) in enumerate(kfold.split(X, y)):\n","        train_df = df.iloc[train_idx].copy().reset_index(drop=True)\n","        test_df = df.iloc[val_idx].copy().reset_index(drop=True) \n","        \n","        datas.append((train_df, test_df))\n","    return datas\n","\n","datas = split_df(X)"],"metadata":{"id":"eI-sBW7Djbiv","executionInfo":{"status":"ok","timestamp":1654180047638,"user_tz":-540,"elapsed":16,"user":{"displayName":"오재동","userId":"09849167419611092646"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["len(datas[0][0]['goodsno'].unique()), len(datas[0][1]['goodsno'].unique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rPG1p9yKV4UT","executionInfo":{"status":"ok","timestamp":1654180047639,"user_tz":-540,"elapsed":11,"user":{"displayName":"오재동","userId":"09849167419611092646"}},"outputId":"cef1bed0-3fad-4a99-968b-c431c85bb7b9"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(5521, 1475)"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["fold_n = 5\n","\n","f_index = []\n","mf_result = []\n","mf_k_result = []\n","mf_ab_result = []\n","\n","# 최적의 fold_dataset 탐색\n","for fold in range(0, fold_n):\n","  R_temp = dog_ratings.pivot(index='m_no', columns='goodsno', values='point').fillna(0)\n","  mf = NEW_MF(R_temp, K=20, alpha=0.001, beta=0.02, iterations=100, verbose=True)   # MF 클래스 생성 \n","  mf.set_train_val(datas[fold][0])\n","  mf.set_test(datas[fold][1])\n","  f_index.append(fold)\n","  mf_result.append(mf.test())\n","\n","  mf2 = NEW_MF(R_temp, K=40, alpha=0.001, beta=0.02, iterations=100, verbose=True)   # MF 클래스 생성 \n","  mf2.set_train_val(datas[fold][0])\n","  mf2.set_test(datas[fold][1])\n","  mf_k_result.append(mf2.test())\n","\n","  mf3 = NEW_MF(R_temp, K=40, alpha=0.008, beta=0.1, iterations=100, verbose=True)   # MF 클래스 생성 \n","  mf3.set_train_val(datas[fold][0])\n","  mf3.set_test(datas[fold][1])\n","  mf_ab_result.append(mf3.test())"],"metadata":{"id":"jz7q0ZON2gcz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654182954266,"user_tz":-540,"elapsed":2904762,"user":{"displayName":"오재동","userId":"09849167419611092646"}},"outputId":"da22dc1f-01fb-450d-81a1-31be4c3114e4"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Iteration: 10; Training RMSE=0.7940; Val RMSE = 0.8022; Test RMSE = 0.9310\n","Iteration: 20; Training RMSE=0.7650; Val RMSE = 0.7787; Test RMSE = 0.9117\n","Iteration: 30; Training RMSE=0.7515; Val RMSE = 0.7692; Test RMSE = 0.9037\n","Iteration: 40; Training RMSE=0.7437; Val RMSE = 0.7647; Test RMSE = 0.8997\n","Iteration: 50; Training RMSE=0.7384; Val RMSE = 0.7622; Test RMSE = 0.8976\n","Iteration: 60; Training RMSE=0.7344; Val RMSE = 0.7609; Test RMSE = 0.8965\n","Iteration: 70; Training RMSE=0.7312; Val RMSE = 0.7601; Test RMSE = 0.8958\n","Iteration: 80; Training RMSE=0.7282; Val RMSE = 0.7596; Test RMSE = 0.8955\n","Iteration: 90; Training RMSE=0.7255; Val RMSE = 0.7593; Test RMSE = 0.8954\n","Iteration: 100; Training RMSE=0.7227; Val RMSE = 0.7591; Test RMSE = 0.8955\n","Iteration: 10; Training RMSE=0.7941; Val RMSE = 0.8037; Test RMSE = 0.9309\n","Iteration: 20; Training RMSE=0.7654; Val RMSE = 0.7807; Test RMSE = 0.9116\n","Iteration: 30; Training RMSE=0.7522; Val RMSE = 0.7716; Test RMSE = 0.9036\n","Iteration: 40; Training RMSE=0.7446; Val RMSE = 0.7673; Test RMSE = 0.8997\n","Iteration: 50; Training RMSE=0.7397; Val RMSE = 0.7652; Test RMSE = 0.8977\n","Iteration: 60; Training RMSE=0.7360; Val RMSE = 0.7642; Test RMSE = 0.8965\n","Iteration: 70; Training RMSE=0.7332; Val RMSE = 0.7636; Test RMSE = 0.8959\n","Iteration: 80; Training RMSE=0.7308; Val RMSE = 0.7633; Test RMSE = 0.8955\n","Iteration: 90; Training RMSE=0.7286; Val RMSE = 0.7632; Test RMSE = 0.8954\n","Iteration: 100; Training RMSE=0.7265; Val RMSE = 0.7632; Test RMSE = 0.8954\n","Iteration: 10; Training RMSE=0.7347; Val RMSE = 0.7581; Test RMSE = 0.8971\n","Iteration: 20; Training RMSE=0.7256; Val RMSE = 0.7574; Test RMSE = 0.8984\n","Iteration: 30; Training RMSE=0.7175; Val RMSE = 0.7578; Test RMSE = 0.9021\n","Iteration: 40; Training RMSE=0.7037; Val RMSE = 0.7559; Test RMSE = 0.9051\n","Iteration: 50; Training RMSE=0.6835; Val RMSE = 0.7547; Test RMSE = 0.9085\n","Iteration: 60; Training RMSE=0.6562; Val RMSE = 0.7521; Test RMSE = 0.9113\n","Iteration: 70; Training RMSE=0.6261; Val RMSE = 0.7501; Test RMSE = 0.9142\n","Iteration: 80; Training RMSE=0.5983; Val RMSE = 0.7492; Test RMSE = 0.9169\n","Iteration: 90; Training RMSE=0.5753; Val RMSE = 0.7490; Test RMSE = 0.9194\n","Iteration: 100; Training RMSE=0.5570; Val RMSE = 0.7490; Test RMSE = 0.9218\n","Iteration: 10; Training RMSE=0.8142; Val RMSE = 0.8332; Test RMSE = 0.8059\n","Iteration: 20; Training RMSE=0.7848; Val RMSE = 0.8097; Test RMSE = 0.7832\n","Iteration: 30; Training RMSE=0.7709; Val RMSE = 0.8003; Test RMSE = 0.7742\n","Iteration: 40; Training RMSE=0.7628; Val RMSE = 0.7960; Test RMSE = 0.7700\n","Iteration: 50; Training RMSE=0.7572; Val RMSE = 0.7936; Test RMSE = 0.7678\n","Iteration: 60; Training RMSE=0.7529; Val RMSE = 0.7923; Test RMSE = 0.7667\n","Iteration: 70; Training RMSE=0.7491; Val RMSE = 0.7914; Test RMSE = 0.7661\n","Iteration: 80; Training RMSE=0.7454; Val RMSE = 0.7907; Test RMSE = 0.7658\n","Iteration: 90; Training RMSE=0.7416; Val RMSE = 0.7901; Test RMSE = 0.7656\n","Iteration: 100; Training RMSE=0.7373; Val RMSE = 0.7894; Test RMSE = 0.7656\n","Iteration: 10; Training RMSE=0.8141; Val RMSE = 0.8284; Test RMSE = 0.8062\n","Iteration: 20; Training RMSE=0.7850; Val RMSE = 0.8063; Test RMSE = 0.7836\n","Iteration: 30; Training RMSE=0.7715; Val RMSE = 0.7979; Test RMSE = 0.7748\n","Iteration: 40; Training RMSE=0.7638; Val RMSE = 0.7943; Test RMSE = 0.7707\n","Iteration: 50; Training RMSE=0.7587; Val RMSE = 0.7924; Test RMSE = 0.7687\n","Iteration: 60; Training RMSE=0.7548; Val RMSE = 0.7915; Test RMSE = 0.7676\n","Iteration: 70; Training RMSE=0.7516; Val RMSE = 0.7910; Test RMSE = 0.7671\n","Iteration: 80; Training RMSE=0.7486; Val RMSE = 0.7906; Test RMSE = 0.7669\n","Iteration: 90; Training RMSE=0.7455; Val RMSE = 0.7902; Test RMSE = 0.7669\n","Iteration: 100; Training RMSE=0.7421; Val RMSE = 0.7897; Test RMSE = 0.7669\n","Iteration: 10; Training RMSE=0.7538; Val RMSE = 0.7972; Test RMSE = 0.7682\n","Iteration: 20; Training RMSE=0.7434; Val RMSE = 0.7966; Test RMSE = 0.7688\n","Iteration: 30; Training RMSE=0.7313; Val RMSE = 0.7956; Test RMSE = 0.7698\n","Iteration: 40; Training RMSE=0.7129; Val RMSE = 0.7928; Test RMSE = 0.7702\n","Iteration: 50; Training RMSE=0.6855; Val RMSE = 0.7885; Test RMSE = 0.7700\n","Iteration: 60; Training RMSE=0.6526; Val RMSE = 0.7852; Test RMSE = 0.7693\n","Iteration: 70; Training RMSE=0.6204; Val RMSE = 0.7829; Test RMSE = 0.7694\n","Iteration: 80; Training RMSE=0.5933; Val RMSE = 0.7821; Test RMSE = 0.7698\n","Iteration: 90; Training RMSE=0.5714; Val RMSE = 0.7816; Test RMSE = 0.7702\n","Iteration: 100; Training RMSE=0.5546; Val RMSE = 0.7818; Test RMSE = 0.7708\n","Iteration: 10; Training RMSE=0.8221; Val RMSE = 0.8296; Test RMSE = 0.7721\n","Iteration: 20; Training RMSE=0.7924; Val RMSE = 0.8051; Test RMSE = 0.7513\n","Iteration: 30; Training RMSE=0.7784; Val RMSE = 0.7953; Test RMSE = 0.7437\n","Iteration: 40; Training RMSE=0.7702; Val RMSE = 0.7906; Test RMSE = 0.7405\n","Iteration: 50; Training RMSE=0.7646; Val RMSE = 0.7882; Test RMSE = 0.7390\n","Iteration: 60; Training RMSE=0.7602; Val RMSE = 0.7867; Test RMSE = 0.7383\n","Iteration: 70; Training RMSE=0.7563; Val RMSE = 0.7858; Test RMSE = 0.7381\n","Iteration: 80; Training RMSE=0.7526; Val RMSE = 0.7850; Test RMSE = 0.7381\n","Iteration: 90; Training RMSE=0.7486; Val RMSE = 0.7843; Test RMSE = 0.7382\n","Iteration: 100; Training RMSE=0.7441; Val RMSE = 0.7833; Test RMSE = 0.7383\n","Iteration: 10; Training RMSE=0.8219; Val RMSE = 0.8197; Test RMSE = 0.7710\n","Iteration: 20; Training RMSE=0.7923; Val RMSE = 0.7964; Test RMSE = 0.7500\n","Iteration: 30; Training RMSE=0.7787; Val RMSE = 0.7876; Test RMSE = 0.7423\n","Iteration: 40; Training RMSE=0.7708; Val RMSE = 0.7837; Test RMSE = 0.7390\n","Iteration: 50; Training RMSE=0.7657; Val RMSE = 0.7818; Test RMSE = 0.7376\n","Iteration: 60; Training RMSE=0.7618; Val RMSE = 0.7809; Test RMSE = 0.7370\n","Iteration: 70; Training RMSE=0.7586; Val RMSE = 0.7804; Test RMSE = 0.7368\n","Iteration: 80; Training RMSE=0.7556; Val RMSE = 0.7802; Test RMSE = 0.7369\n","Iteration: 90; Training RMSE=0.7526; Val RMSE = 0.7799; Test RMSE = 0.7371\n","Iteration: 100; Training RMSE=0.7492; Val RMSE = 0.7795; Test RMSE = 0.7374\n","Iteration: 10; Training RMSE=0.7611; Val RMSE = 0.7882; Test RMSE = 0.7376\n","Iteration: 20; Training RMSE=0.7510; Val RMSE = 0.7878; Test RMSE = 0.7385\n","Iteration: 30; Training RMSE=0.7392; Val RMSE = 0.7864; Test RMSE = 0.7406\n","Iteration: 40; Training RMSE=0.7206; Val RMSE = 0.7834; Test RMSE = 0.7413\n","Iteration: 50; Training RMSE=0.6927; Val RMSE = 0.7792; Test RMSE = 0.7415\n","Iteration: 60; Training RMSE=0.6581; Val RMSE = 0.7751; Test RMSE = 0.7423\n","Iteration: 70; Training RMSE=0.6240; Val RMSE = 0.7720; Test RMSE = 0.7429\n","Iteration: 80; Training RMSE=0.5952; Val RMSE = 0.7703; Test RMSE = 0.7438\n","Iteration: 90; Training RMSE=0.5723; Val RMSE = 0.7693; Test RMSE = 0.7451\n","Iteration: 100; Training RMSE=0.5549; Val RMSE = 0.7691; Test RMSE = 0.7464\n","Iteration: 10; Training RMSE=0.8165; Val RMSE = 0.8310; Test RMSE = 0.7951\n","Iteration: 20; Training RMSE=0.7866; Val RMSE = 0.8064; Test RMSE = 0.7746\n","Iteration: 30; Training RMSE=0.7725; Val RMSE = 0.7965; Test RMSE = 0.7671\n","Iteration: 40; Training RMSE=0.7642; Val RMSE = 0.7918; Test RMSE = 0.7641\n","Iteration: 50; Training RMSE=0.7586; Val RMSE = 0.7893; Test RMSE = 0.7628\n","Iteration: 60; Training RMSE=0.7542; Val RMSE = 0.7879; Test RMSE = 0.7623\n","Iteration: 70; Training RMSE=0.7503; Val RMSE = 0.7869; Test RMSE = 0.7623\n","Iteration: 80; Training RMSE=0.7466; Val RMSE = 0.7862; Test RMSE = 0.7625\n","Iteration: 90; Training RMSE=0.7426; Val RMSE = 0.7854; Test RMSE = 0.7628\n","Iteration: 100; Training RMSE=0.7381; Val RMSE = 0.7846; Test RMSE = 0.7632\n","Iteration: 10; Training RMSE=0.8170; Val RMSE = 0.8261; Test RMSE = 0.7946\n","Iteration: 20; Training RMSE=0.7873; Val RMSE = 0.8004; Test RMSE = 0.7738\n","Iteration: 30; Training RMSE=0.7734; Val RMSE = 0.7898; Test RMSE = 0.7662\n","Iteration: 40; Training RMSE=0.7654; Val RMSE = 0.7846; Test RMSE = 0.7630\n","Iteration: 50; Training RMSE=0.7600; Val RMSE = 0.7819; Test RMSE = 0.7617\n","Iteration: 60; Training RMSE=0.7560; Val RMSE = 0.7803; Test RMSE = 0.7611\n","Iteration: 70; Training RMSE=0.7527; Val RMSE = 0.7792; Test RMSE = 0.7610\n","Iteration: 80; Training RMSE=0.7496; Val RMSE = 0.7785; Test RMSE = 0.7612\n","Iteration: 90; Training RMSE=0.7464; Val RMSE = 0.7779; Test RMSE = 0.7615\n","Iteration: 100; Training RMSE=0.7430; Val RMSE = 0.7771; Test RMSE = 0.7618\n","Iteration: 10; Training RMSE=0.7550; Val RMSE = 0.7926; Test RMSE = 0.7617\n","Iteration: 20; Training RMSE=0.7447; Val RMSE = 0.7920; Test RMSE = 0.7644\n","Iteration: 30; Training RMSE=0.7320; Val RMSE = 0.7898; Test RMSE = 0.7668\n","Iteration: 40; Training RMSE=0.7115; Val RMSE = 0.7848; Test RMSE = 0.7681\n","Iteration: 50; Training RMSE=0.6827; Val RMSE = 0.7794; Test RMSE = 0.7695\n","Iteration: 60; Training RMSE=0.6499; Val RMSE = 0.7747; Test RMSE = 0.7711\n","Iteration: 70; Training RMSE=0.6188; Val RMSE = 0.7719; Test RMSE = 0.7730\n","Iteration: 80; Training RMSE=0.5922; Val RMSE = 0.7701; Test RMSE = 0.7748\n","Iteration: 90; Training RMSE=0.5707; Val RMSE = 0.7690; Test RMSE = 0.7768\n","Iteration: 100; Training RMSE=0.5541; Val RMSE = 0.7687; Test RMSE = 0.7784\n","Iteration: 10; Training RMSE=0.8007; Val RMSE = 0.8184; Test RMSE = 0.8667\n","Iteration: 20; Training RMSE=0.7716; Val RMSE = 0.7957; Test RMSE = 0.8468\n","Iteration: 30; Training RMSE=0.7581; Val RMSE = 0.7865; Test RMSE = 0.8393\n","Iteration: 40; Training RMSE=0.7502; Val RMSE = 0.7819; Test RMSE = 0.8360\n","Iteration: 50; Training RMSE=0.7448; Val RMSE = 0.7793; Test RMSE = 0.8345\n","Iteration: 60; Training RMSE=0.7405; Val RMSE = 0.7777; Test RMSE = 0.8338\n","Iteration: 70; Training RMSE=0.7367; Val RMSE = 0.7765; Test RMSE = 0.8336\n","Iteration: 80; Training RMSE=0.7328; Val RMSE = 0.7754; Test RMSE = 0.8337\n","Iteration: 90; Training RMSE=0.7287; Val RMSE = 0.7743; Test RMSE = 0.8339\n","Iteration: 100; Training RMSE=0.7241; Val RMSE = 0.7730; Test RMSE = 0.8341\n","Iteration: 10; Training RMSE=0.8008; Val RMSE = 0.8023; Test RMSE = 0.8667\n","Iteration: 20; Training RMSE=0.7718; Val RMSE = 0.7791; Test RMSE = 0.8470\n","Iteration: 30; Training RMSE=0.7584; Val RMSE = 0.7700; Test RMSE = 0.8397\n","Iteration: 40; Training RMSE=0.7508; Val RMSE = 0.7657; Test RMSE = 0.8367\n","Iteration: 50; Training RMSE=0.7458; Val RMSE = 0.7635; Test RMSE = 0.8354\n","Iteration: 60; Training RMSE=0.7422; Val RMSE = 0.7622; Test RMSE = 0.8350\n","Iteration: 70; Training RMSE=0.7391; Val RMSE = 0.7615; Test RMSE = 0.8350\n","Iteration: 80; Training RMSE=0.7362; Val RMSE = 0.7609; Test RMSE = 0.8353\n","Iteration: 90; Training RMSE=0.7333; Val RMSE = 0.7604; Test RMSE = 0.8357\n","Iteration: 100; Training RMSE=0.7300; Val RMSE = 0.7597; Test RMSE = 0.8361\n","Iteration: 10; Training RMSE=0.7409; Val RMSE = 0.7628; Test RMSE = 0.8328\n","Iteration: 20; Training RMSE=0.7320; Val RMSE = 0.7626; Test RMSE = 0.8344\n","Iteration: 30; Training RMSE=0.7209; Val RMSE = 0.7597; Test RMSE = 0.8373\n","Iteration: 40; Training RMSE=0.7012; Val RMSE = 0.7541; Test RMSE = 0.8397\n","Iteration: 50; Training RMSE=0.6750; Val RMSE = 0.7488; Test RMSE = 0.8418\n","Iteration: 60; Training RMSE=0.6447; Val RMSE = 0.7439; Test RMSE = 0.8439\n","Iteration: 70; Training RMSE=0.6151; Val RMSE = 0.7408; Test RMSE = 0.8460\n","Iteration: 80; Training RMSE=0.5892; Val RMSE = 0.7384; Test RMSE = 0.8478\n","Iteration: 90; Training RMSE=0.5684; Val RMSE = 0.7372; Test RMSE = 0.8497\n","Iteration: 100; Training RMSE=0.5523; Val RMSE = 0.7364; Test RMSE = 0.8515\n"]}]},{"cell_type":"code","source":["mf_result[3][0]"],"metadata":{"id":"Ys-cmdgM5wce","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654182954267,"user_tz":-540,"elapsed":46,"user":{"displayName":"오재동","userId":"09849167419611092646"}},"outputId":"3ff08d34-0d32-44e1-dd9e-c59b6293ae08"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 0.8945319364371449, 0.9017927680008404, 0.856041681314186)"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["len(mf_ab_result)   # mf_ab_result[0]: kfold-1, mf_ab_result[1]: kfold-2 "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9AbwkpgQ59-Q","executionInfo":{"status":"ok","timestamp":1653997100486,"user_tz":-540,"elapsed":319,"user":{"displayName":"오재동","userId":"09849167419611092646"}},"outputId":"cc133e01-378e-482a-c7ac-cac28b9eee3b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt \n","\n","f, ax = plt.subplots(2, 3, figsize=(16, 8))\n","labels = ['kfold-1', 'kfold-2', 'kfold-3', 'kfold-4', 'kfold-5']\n","idx = 0 \n","\n","for i in range(2):    \n","  for j in range(3):   \n","    try:\n","      ax[i, j].plot([x for x in range(1, 101)], [result[1] for result in mf_result[idx]], color='blue', label='Train RMSE')\n","      ax[i, j].plot([x for x in range(1, 101)], [result[2] for result in mf_result[idx]], color='orange', label='Val RMSE')\n","      # ax[i, j].plot([x for x in range(1, 101)], [result[3] for result in mf_result[idx]], color='red', label='Test RMSE')\n","\n","      ax[i, j].set_ylim(0.5, 1.5)   # y축 범위 설정하기 \n","      ax[i, j].set_xlabel(f'iterations ({labels[idx]})', fontweight='bold')   \n","      ax[i, j].set_ylabel('RMSE', fontweight='bold')\n","      ax[i, j].legend()\n","      idx += 1\n","    except IndexError:\n","      ax[i, j].set_visible(False)\n","\n","plt.show()"],"metadata":{"id":"1o3xHQu5LIl2","colab":{"base_uri":"https://localhost:8080/","height":497},"executionInfo":{"status":"ok","timestamp":1654183001414,"user_tz":-540,"elapsed":1286,"user":{"displayName":"오재동","userId":"09849167419611092646"}},"outputId":"8936bbc4-eca8-4d8a-ceda-fbaeacfd2cb2"},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x576 with 6 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# 5번 KFOLD 결과 값 Plot "],"metadata":{"id":"2sHgC3zmn3Yx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt \n","\n","f, ax = plt.subplots(2, 3, figsize=(16, 8))\n","labels = ['kfold-1', 'kfold-2', 'kfold-3', 'kfold-4', 'kfold-5']\n","idx = 0 \n","\n","for i in range(2):    \n","  for j in range(3):   \n","    try:\n","      ax[i, j].plot([x for x in range(1, 101)], [result[1] for result in mf_k_result[idx]], color='blue', label='Train RMSE')\n","      ax[i, j].plot([x for x in range(1, 101)], [result[2] for result in mf_k_result[idx]], color='orange', label='Val RMSE')\n","      # ax[i, j].plot([x for x in range(1, 101)], [result[3] for result in mf_result[idx]], color='red', label='Test RMSE')\n","      ax[i, j].set_ylim(0.5, 1.5)   # y축 범위 설정하기 \n","      ax[i, j].set_xlabel(f'iterations ({labels[idx]})', fontweight='bold')   \n","      ax[i, j].set_ylabel('RMSE', fontweight='bold')\n","      ax[i, j].legend()\n","      idx += 1\n","    except IndexError:\n","       ax[i, j].set_visible(False)\n","\n","plt.show()"],"metadata":{"id":"WJXtsFFp2iXj","colab":{"base_uri":"https://localhost:8080/","height":497},"executionInfo":{"status":"ok","timestamp":1654183007692,"user_tz":-540,"elapsed":1145,"user":{"displayName":"오재동","userId":"09849167419611092646"}},"outputId":"d5408cdb-b931-4293-b4ef-d7797369cf59"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x576 with 6 Axes>"],"image/png":"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zfkJHUkNmzhxIg888ECdtunTp3PBBRc0+JwJEyaQ7adaJkyYwAEHHMDo0aMZO3YsL774Ys2+YcOGcdRRR9U5vqKigkMOSX49ZtOmTZx55pmMHDmSQw45hCOPPJINGzYAUFJSUud3D6+99tqdfr/tiflOajvmOkkqbvkcAyupFU2ePJmZM2dy3HHH1bTNnDmT6667bqfOd/vtt1NZWcmvf/1rLr30Uh566KGafevXr+fNN99kyJAhLFiwoM7zrr/+egYOHMg///lPAF599VXKysoA6Nq1a50LRElqKXOdJBW3fM5CLKkVnXrqqdx7771s2bIFgCVLlrB8+XKOOuooLrjgAiorKzn44IOZNm1ai847btw4li1bVqfttNNO4/e//z0AM2bMYPLkyTX7VqxYwaBBg2q2DzjgAMrLy3f2bUlSHeY6SSpuFrBSB9G3b18+9KEPMWvWjc29WAAAIABJREFULCC5I3HaaacRQuCaa65h9uzZzJ07l7/97W/MnTu32ee9//77Ofnkk+u0nXLKKdx5550A3H333XziE5+o2Td16lS+973vMW7cOL7xjW/w2muv1ezbvHlznW516QtDSWouc50kFTe7EEu5MOfL8G4rdx/rUwGHTm/0kHTXupNOOomZM2dy8803A/CHP/yBm266ierqalasWMH8+fMZNWpUo+c688wz2bJlCxs2bNihK1y/fv3o06cPM2fOZMSIEXTr1q1mX0VFBYsWLeLBBx/k4YcfZuzYsTz99NOMGDHCbnVSR2OuM9dJUhvzDqzUgZx00kn89a9/5R//+AebNm3i0EMPZfHixfzgBz/gr3/9K3PnzuWEE06gqqqqyXPdfvvtLFq0iLPPPpuLLrpoh/2nn346F154YZ0udWk9evTg05/+ND/72c8466yzuO+++1rl/UkSmOskqZh5B1bKhSbuHuRKjx49mDhxIlOnTq252Fq3bh3du3enV69erFy5klmzZjFhwoRmnS+EwNVXX83w4cN55ZVXOPDAA2v2fepTn2LFihUcd9xxLF++vKb9ySef5KCDDqJPnz5s2bKF+fPnN/v1JBUYc525TpLamHdgpQ5m8uTJvPTSSzUXdaNHj2bMmDEceOCBTJkyhSOOOKJF5+vatStf/epX+f73v1+nvWfPnnzta1+jc+fOddoXLlzI+PHjGTlyJGPGjKGyspJTTjkF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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[""],"metadata":{"id":"Rhj93OcaG-UD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["mf_ab_result"],"metadata":{"id":"ldaswDtr_pCb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt \n","\n","f, ax = plt.subplots(2, 3, figsize=(16, 8))\n","labels = ['kfold-1', 'kfold-2', 'kfold-3', 'kfold-4', 'kfold-5']\n","idx = 0 \n","\n","for i in range(2):    \n","  for j in range(3):   \n","    try:\n","      ax[i, j].plot([x for x in range(1, 101)], [result[1] for result in mf_ab_result[idx]], color='blue', label='Train RMSE')\n","      ax[i, j].plot([x for x in range(1, 101)], [result[2] for result in mf_ab_result[idx]], color='orange', label='Val RMSE')\n","      # ax[i, j].plot([x for x in range(1, 101)], [result[3] for result in mf_ab_result[idx]], color='red', label='Test RMSE')\n","      ax[i, j].set_ylim(0.5, 1.5)   # y축 범위 설정하기 \n","      ax[i, j].set_xlabel(f'iterations ({labels[idx]})', fontweight='bold')   \n","      ax[i, j].set_ylabel('RMSE', fontweight='bold')\n","      ax[i, j].legend()\n","      idx += 1\n","    except IndexError:\n","       ax[i, j].set_visible(False)\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":497},"id":"eqpeQSoofJCP","executionInfo":{"status":"ok","timestamp":1654183229953,"user_tz":-540,"elapsed":2151,"user":{"displayName":"오재동","userId":"09849167419611092646"}},"outputId":"8d3813f5-3335-4902-ed7a-72b0ec55a659"},"execution_count":17,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x576 with 6 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["print(mf3.full_prediction())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QPw33jDEj7Yz","executionInfo":{"status":"ok","timestamp":1654185047918,"user_tz":-540,"elapsed":460,"user":{"displayName":"오재동","userId":"09849167419611092646"}},"outputId":"e0b40f27-6db0-458b-8d21-ad87c95ccbdf"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["[[4.45201014 5.16118291 5.15934579 ... 4.80721291 4.78400581 5.04344653]\n"," [3.93054336 4.60819733 4.66257726 ... 4.24447977 4.2420138  4.49859118]\n"," [3.81621503 4.48911395 4.55698819 ... 4.21234048 4.18595221 4.41372701]\n"," ...\n"," [4.51494683 5.1984228  5.2201481  ... 4.84285721 4.84464611 5.10564645]\n"," [2.97847696 3.66979    3.81596213 ... 3.30114292 3.34090101 3.5743575 ]\n"," [3.7402966  4.55386839 4.56415866 ... 4.05290446 4.01240316 4.29286483]]\n"]}]},{"cell_type":"code","source":["print(mf3.get_one_prediction(98380, 17984))   \t\t"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4HJJB4N1j_1T","executionInfo":{"status":"ok","timestamp":1654185049816,"user_tz":-540,"elapsed":347,"user":{"displayName":"오재동","userId":"09849167419611092646"}},"outputId":"db04f16e-8b38-41aa-a91e-5b19c649fe19"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["4.2530723969296345\n"]}]},{"cell_type":"code","source":["def convert_sent(point_list):\n","  list_p = []\n","  for idx, point in enumerate(point_list):\n","    if point < 3:\n","      list_p.append(0)\n","    else:\n","      list_p.append(1)\n","  print(len(list_p))\n","  return list_p"],"metadata":{"id":"1eSFCS8nQdYV","executionInfo":{"status":"ok","timestamp":1654185116792,"user_tz":-540,"elapsed":524,"user":{"displayName":"오재동","userId":"09849167419611092646"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import classification_report, confusion_matrix, precision_score, recall_score, f1_score\n","import seaborn as sns\n","\n","def c_matrix(model): \n","  ''' \n","  score 함수 수정: 모델 이름 + neighbor_size 지정할 수 있도록 파라미터 변경 \n","  model 입력으로 받아, test 데이터에 대한 RMSE 값을 계산하여 반환 \n","  '''\n","  id_pairs = zip(datas[2][1]['m_no'], datas[2][1]['goodsno'])    # id_pairs: (user_id1, goodsno1), (user_id2, goodsno2), (user_id3, goodsno3) 쌍을 얻음 \n","  y_pred = np.array([model.get_one_prediction(user, item) for (user, item) in id_pairs])   # user_id와 movie_id 값을 이용해 예측 값 계산 \n","  # print(y_pred, type(y_pred))\n","  y_pred = list(convert_sent(list(y_pred)))\n","  y_true = list(convert_sent(datas[2][1]['point']))   # test 데이터의 실제 값 저장 \n","  \n","  # print(len(y_pred), len(y_true), type(y_pred), type(y_true))\n","  cm = confusion_matrix(y_true, y_pred)\n","  cmdf = pd.DataFrame(cm, index=['실제값(1)', '실제값(0)'], columns=['예측값(1)', '예측값(0)'])\n","  return cmdf"],"metadata":{"id":"YCaeUtG0PtZs","executionInfo":{"status":"ok","timestamp":1654185117242,"user_tz":-540,"elapsed":4,"user":{"displayName":"오재동","userId":"09849167419611092646"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["c_matrix(mf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":147},"id":"WPb2cAyGmta0","executionInfo":{"status":"ok","timestamp":1654185120418,"user_tz":-540,"elapsed":22,"user":{"displayName":"오재동","userId":"09849167419611092646"}},"outputId":"f0925325-1b6b-420d-851f-d2c0849994a8"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["20000\n","20000\n"]},{"output_type":"execute_result","data":{"text/plain":["        예측값(1)  예측값(0)\n","실제값(1)      35     604\n","실제값(0)      62   19299"],"text/html":["\n","  <div id=\"df-c9a3d27a-df3f-4b28-9b60-dbe8b04e96d4\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>예측값(1)</th>\n","      <th>예측값(0)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>실제값(1)</th>\n","      <td>35</td>\n","      <td>604</td>\n","    </tr>\n","    <tr>\n","      <th>실제값(0)</th>\n","      <td>62</td>\n","      <td>19299</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c9a3d27a-df3f-4b28-9b60-dbe8b04e96d4')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c9a3d27a-df3f-4b28-9b60-dbe8b04e96d4 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c9a3d27a-df3f-4b28-9b60-dbe8b04e96d4');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["c_matrix(mf3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":147},"id":"VcNoo9N7lqgB","executionInfo":{"status":"ok","timestamp":1654185120421,"user_tz":-540,"elapsed":19,"user":{"displayName":"오재동","userId":"09849167419611092646"}},"outputId":"69887ffb-8b21-41bd-d87d-40dd97204fe0"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["20000\n","20000\n"]},{"output_type":"execute_result","data":{"text/plain":["        예측값(1)  예측값(0)\n","실제값(1)     294     345\n","실제값(0)      60   19301"],"text/html":["\n","  <div id=\"df-770b8076-1a5d-4a57-affd-c1f4ae6d5eae\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>예측값(1)</th>\n","      <th>예측값(0)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>실제값(1)</th>\n","      <td>294</td>\n","      <td>345</td>\n","    </tr>\n","    <tr>\n","      <th>실제값(0)</th>\n","      <td>60</td>\n","      <td>19301</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-770b8076-1a5d-4a57-affd-c1f4ae6d5eae')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-770b8076-1a5d-4a57-affd-c1f4ae6d5eae button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-770b8076-1a5d-4a57-affd-c1f4ae6d5eae');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["def recom_item(user_id, n_items):\n","  '''\n","  사용자 ID, 추천 아이템 수를 넘겨 받아 \n","  주어진 사용자에 대한 아이템을 추천해서 돌려주는 함수 \n","  '''\n","  user_item = R_temp.loc[user_id].copy()\n","  for item in R_temp:\n","    if user_item.loc[item] != 0:\n","      user_item.loc[item] = 0 \n","    else:\n","      user_item.loc[item] = mf3.get_one_prediction(user_id, item)\n","  \n","  item_sort = user_item.sort_values(ascending=False)[:n_items]\n","  recomm_items = dog_item.loc[item_sort.index]\n","  recommendations = recomm_items['goodsnm']\n","  return recommendations\n","\n","recom_item(98380, 5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j2Kw1Estlx9Y","executionInfo":{"status":"ok","timestamp":1654185129964,"user_tz":-540,"elapsed":861,"user":{"displayName":"오재동","userId":"09849167419611092646"}},"outputId":"a264803d-9c15-4524-8d9e-d39d056bf83d"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["goodsno\n","12320             헬로도기 그대로 닭가슴살 100g\n","56639    도기맨 무첨가간식 콜라겐 첨가 껌 회오리볼 7개입\n","59209                    펫모닝 알파카 브라운\n","40464              도그밥 천연수제 오리목뼈 40g\n","56645             네이쳐스 본 오리 날개뼈 200g\n","Name: goodsnm, dtype: object"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":[""],"metadata":{"id":"73x4nyS6nCnw"},"execution_count":null,"outputs":[]}]}